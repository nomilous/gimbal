// Generated by CoffeeScript 1.4.0

module.exports = function(subscribe, publish, edge, context) {
  var id, primaryViewportID, viewports;
  id = edge.localId();
  viewports = void 0;
  primaryViewportID = void 0;
  subscribe('event:register:controller', function(payload) {
    var inputCube, send, _base;
    console.log("RECEIVED:", payload);
    context.gimbal || (context.gimbal = {});
    (_base = context.gimbal).controllers || (_base.controllers = {});
    primaryViewportID = payload.viewport.id;
    inputCube = payload.input_cube;
    context.gimbal.controllers[id] = {
      edge: edge,
      primary: primaryViewportID,
      viewports: []
    };
    context.gimbal.controllers[id].viewports.push(primaryViewportID);
    viewports = context.gimbal.controllers[id].viewports;
    send = context.gimbal.viewports[primaryViewportID].getPublisher();
    send('event:assigned', {
      controller: id,
      primary: true,
      input_cube: inputCube
    });
    return publish('event:register:controller:ok', {
      viewport: {
        id: primaryViewportID,
        primary: true
      },
      config: {
        pending: "pending"
      }
    });
  });
  subscribe('event:release:controller', function(payload) {
    var send, viewportArray, viewportID, _i, _len;
    console.log('RECEIVED: event:release:controller');
    viewportArray = [];
    if (viewports) {
      for (_i = 0, _len = viewports.length; _i < _len; _i++) {
        viewportID = viewports[_i];
        send = context.gimbal.viewports[viewportID].getPublisher();
        send('event:reset', '');
        viewportArray.push({
          id: viewportID,
          primary: viewportID === primaryViewportID
        });
      }
      viewports = void 0;
    }
    context.gimbal.controllers[id].disconnected = true;
    return publish('event:release:controller:ok', {
      viewports: viewportArray
    });
  });
  return subscribe('event:viewport:broadcast', function(payload) {
    var send, viewportID, _i, _len, _results;
    if (!viewports) {
      return;
    }
    _results = [];
    for (_i = 0, _len = viewports.length; _i < _len; _i++) {
      viewportID = viewports[_i];
      send = context.gimbal.viewports[viewportID].getPublisher();
      _results.push(send(payload.code, payload.event));
    }
    return _results;
  });
};
