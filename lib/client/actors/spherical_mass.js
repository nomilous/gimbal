// Generated by CoffeeScript 1.6.3
var define,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(['../hud/hud_visible.js'], function(HudVisible) {
  var SphericalMass;
  return SphericalMass = (function(_super) {
    __extends(SphericalMass, _super);

    function SphericalMass(globals, ui, config) {
      var _base, _base1;
      this.ui = ui;
      SphericalMass.__super__.constructor.call(this, globals, this.ui, config);
      this.sphericalmass = true;
      this.THREE = globals.THREE;
      this.radius || (this.radius = Math.sqrt(this.mass) / 10);
      this.segments || (this.segments = 20);
      this.rings || (this.rings = 20);
      this.material || (this.material = {});
      (_base = this.material).color || (_base.color = 0x777777);
      if (this.light != null) {
        (_base1 = this.light).color || (_base1.color = 0xFFFFFF);
      }
    }

    SphericalMass.prototype.onVisRegister = function(visualizer) {
      var Mesh, MeshLambertMaterial, MeshNormalMaterial, PointLight, SphereGeometry, geometry, material, _ref;
      _ref = this.THREE, MeshLambertMaterial = _ref.MeshLambertMaterial, MeshNormalMaterial = _ref.MeshNormalMaterial, SphereGeometry = _ref.SphereGeometry, Mesh = _ref.Mesh, PointLight = _ref.PointLight;
      if (this.light != null) {
        material = new MeshNormalMaterial(this.material);
      } else {
        material = new MeshLambertMaterial(this.material);
      }
      geometry = new SphereGeometry(this.radius, this.segments, this.rings);
      this.GLobject = new Mesh(geometry, material);
      this.GLobject.position = this.position;
      visualizer.scene.add(this.GLobject);
      if (this.light != null) {
        this.GLobject_as_light = new PointLight(this.light.color);
        this.GLobject_as_light.position = this.position;
        return visualizer.scene.add(this.GLobject_as_light);
      }
    };

    return SphericalMass;

  })(HudVisible);
});
