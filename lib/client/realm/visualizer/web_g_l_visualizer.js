// Generated by CoffeeScript 1.6.3
var define;

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(function() {
  var WebGLVisualizer, camera, renderer;
  camera = renderer = void 0;
  return WebGLVisualizer = (function() {
    function WebGLVisualizer(_arg, ui, config) {
      var THREE, document, window;
      window = _arg.window, document = _arg.document, THREE = _arg.THREE;
      this.ui = ui;
      if (config == null) {
        config = {};
      }
      this.container = document.createElement('div');
      document.body.appendChild(this.container);
      this.scene = new THREE.Scene;
      this.camera = camera = new THREE.PerspectiveCamera(config.fov || 70.0, window.innerWidth / window.innerHeight, config.near || 1.0, config.far || 10000.0);
      this.scene.add(this.camera);
      this.renderer = renderer = new THREE.WebGLRenderer;
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.setClearColor(config.clearColor || 0x000000, config.clearAlpha || 1);
      this.container.appendChild(this.renderer.domElement);
      window.addEventListener('resize', this.onWindowResize, false);
    }

    WebGLVisualizer.prototype.onWindowResize = function() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      return renderer.setSize(window.innerWidth, window.innerHeight);
    };

    WebGLVisualizer.prototype.render = function(scene, camera) {
      return this.renderer.render(scene || this.scene, camera || this.camera);
    };

    WebGLVisualizer.prototype.registerActor = function(actor) {
      if (typeof actor.onVisRegister === 'function') {
        return actor.onVisRegister(this);
      }
    };

    return WebGLVisualizer;

  })();
});
