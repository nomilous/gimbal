// Generated by CoffeeScript 1.6.3
var define;

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(function() {
  var Collision;
  return Collision = (function() {
    function Collision(_arg, ui, config) {
      this.THREE = _arg.THREE, this.tools = _arg.tools;
      this.ui = ui;
      this.name = 'collision';
    }

    Collision.prototype.registerActor = function(token, actor) {
      if (actor.collision == null) {
        return;
      }
      if (token.detectCollision == null) {
        this.tools.AsCollisionDetector.call(this, token);
      }
      actor.force || (actor.force = {});
      actor.force.impulse = new this.THREE.Vector3(0, 0, 0);
      return actor.elasticity || (actor.elasticity = 0);
    };

    Collision.prototype.preSet = function(token, actor) {
      if (actor.collision == null) {
        return;
      }
      return actor.force.impulse.set(0, 0, 0);
    };

    Collision.prototype.postSet = function(token, actor1, actor2) {
      var impulse, masssum, response;
      if (actor1.collision == null) {
        return;
      }
      if (actor2.collision == null) {
        return;
      }
      response = this.detectCollision(token, actor1, actor2, response);
      if (!response.intersect.get) {
        return;
      }
      impulse = this.calculateImpulse(token, actor1, actor2, response);
      masssum = actor1.mass + actor2.mass;
      this.applyImpulse(token, impulse, actor2.mass / masssum, actor1, actor1.id === response.lighter.id);
      return this.applyImpulse(token, impulse, actor1.mass / masssum, actor2, actor2.id === response.lighter.id);
    };

    Collision.prototype.calculateImpulse = function(token, actor1, actor2, response) {
      var impulse_scalar, impulse_vector;
      impulse_scalar = response.lighter.mass * response.closing * 2 / token.time;
      impulse_vector = token.pair.range_vector(token, token.cycle, actor1.id === response.lighter.id ? actor1 : actor2, actor1.id === response.lighter.id ? actor2 : actor1).clone();
      impulse_vector.normalize().multiplyScalar(impulse_scalar);
      return impulse_vector;
    };

    Collision.prototype.applyImpulse = function(token, impulse, proportion, actor, reference) {
      var delta_velocity;
      actor.force.impulse.copy(impulse);
      if (reference) {
        actor.force.impulse.negate();
      }
      delta_velocity = actor.force.impulse.clone();
      delta_velocity.divideScalar(actor.mass);
      delta_velocity.multiplyScalar(proportion);
      actor.velocity.add(delta_velocity);
      delta_velocity.multiplyScalar(token.time);
      return actor.position.add(delta_velocity);
    };

    return Collision;

  })();
});
