// Generated by CoffeeScript 1.6.3
var define;

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(function() {
  var Gravitation;
  return Gravitation = (function() {
    function Gravitation(_arg, ui, config) {
      this.THREE = _arg.THREE;
      this.ui = ui;
      if (config == null) {
        config = {};
      }
      this.name = 'gravitation';
      this.G = config.G || 1.0;
    }

    Gravitation.prototype.registerActor = function(token, actor) {
      if (actor.gravitation == null) {
        return;
      }
      if (actor.force == null) {
        actor.force = {};
      }
      return actor.force.gravity = new this.THREE.Vector3(0, 0, 0);
    };

    Gravitation.prototype.preSet = function(token, actor) {
      if (actor.gravitation == null) {
        return;
      }
      return actor.force.gravity.set(0, 0, 0);
    };

    Gravitation.prototype.accumulate = function(token, actor1, actor2) {
      var gravity, rSquared, range_vector, scalarD, scalarG;
      if (actor1.gravitation == null) {
        return;
      }
      if (actor2.gravitation == null) {
        return;
      }
      range_vector = token.pair.range_vector(token, token.cycle, actor1, actor2);
      gravity = range_vector.clone();
      rSquared = gravity.dot(gravity);
      scalarG = this.G * actor1.mass * actor2.mass / rSquared;
      scalarD = Math.sqrt(rSquared);
      gravity.multiplyScalar(scalarG / scalarD);
      actor1.force.gravity.sub(gravity);
      return actor2.force.gravity.add(gravity);
    };

    Gravitation.prototype.applyQuadratic = function(token, actor) {
      if (actor.gravitation == null) {
        return;
      }
      actor.force.gravity.multiplyScalar(token.time);
      actor.force.gravity.divideScalar(actor.mass);
      return actor.velocity.add(actor.force.gravity);
    };

    return Gravitation;

  })();
});
