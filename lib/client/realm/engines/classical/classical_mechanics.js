// Generated by CoffeeScript 1.6.3
var define;

if (typeof define !== 'function') {
  define = require('amdefine')(module);
}

define(function() {
  var ClassicalMechanics;
  return ClassicalMechanics = (function() {
    function ClassicalMechanics(globals, ui, config) {
      this.ui = ui;
      if (config == null) {
        config = {};
      }
      this.behaviours = {};
      this.token = {
        cycle: 0,
        time: config.time || 1.0,
        paused: config.paused || false,
        count: 0,
        actors: null
      };
      this.ui.token = this.token;
    }

    ClassicalMechanics.prototype.registerBehaviour = function(behaviour) {
      return this.behaviours[behaviour.name] = behaviour;
    };

    ClassicalMechanics.prototype.registerActor = function(actor, token) {
      var behaviour, name, _results;
      token || (token = this.token);
      _results = [];
      for (name in this.behaviours) {
        behaviour = this.behaviours[name];
        if ((actor[behaviour.name] != null) && !actor[behaviour.name]) {
          continue;
        }
        if (typeof behaviour.registerActor !== 'function') {
          continue;
        }
        _results.push(behaviour.registerActor(token, actor));
      }
      return _results;
    };

    ClassicalMechanics.prototype.mainloop = function(actors) {
      if (this.token.paused) {
        return;
      }
      this.token.cycle++;
      this.token.count = actors.length;
      this.token.actors = actors;
      this.accumulate(this.token);
      return this.apply(this.token);
    };

    ClassicalMechanics.prototype.accumulate = function(token) {};

    ClassicalMechanics.prototype.apply = function(token) {
      var actor, behaviour, name, _i, _len, _ref, _results;
      _ref = token.actors;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        actor = _ref[_i];
        if (!actor.enabled) {
          continue;
        }
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (name in this.behaviours) {
            behaviour = this.behaviours[name];
            if (typeof behaviour.applyQuadratic === 'function') {
              behaviour.applyQuadratic(token, actor);
            }
            if (typeof behaviour.applyLinear === 'function') {
              _results1.push(behaviour.applyLinear(token, actor));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return ClassicalMechanics;

  })();
});
